import pygame
import random
import sys
import pygame.freetype
from pygame.locals import *

pygame.init()
screen=pygame.display.set_mode((800,600))

def main():

    global screen
    pygame.display.set_caption("贪吃蛇")
    flock = pygame.time.Clock()

    Fun = [[1, 0], [1, 0], [1, 0], [1, 0]]
    startx=random.randint(5, 34)
    starty=random.randint(10,20)
    Body=[[startx,starty]]
#    print(Body)
    for i in range(1,4):
        print(i)
        Body.append([startx+i,starty])
    snake=Snake(Body,Fun)                                    #初始化snake


    while True:
        x=1
        can = snake.can()                            #先判断能否前进（走，吃，死三种可能）
        if can == 'r':
            snake.run()
#            print('r', snake.fung, '\n', snake.body)
        elif can == 'e':
            snake.eat()
            snake.run()
#            print('e', snake.body, snake.food, )
#            print(snake.fung)
            snake.feed()
        elif can == 'n':
            snake.die()
#            print('n')
            sys.exit()


        for event in pygame.event.get():               #接受事件
            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == KEYDOWN:
                x=0
                if event.key == K_LEFT and snake.fung[-1] != [1, 0]:
                    snake.left()
                    break
                elif event.key == K_RIGHT and snake.fung[-1] != [-1, 0]:
                    snake.right()
                    break
                elif event.key == K_UP and snake.fung[-1] != [0, 1]:
                    snake.up()
                    break
                elif event.key == K_DOWN and snake.fung[-1] != [0, -1]:
                    snake.down()
                    break
                else:
                    x=1
        if x:                                        #如果没有任何操作
            snake.go()

#        check(snake)                              #检查是否出现错位等情况

        screen.fill((255,255,255))
        show(snake.food,(180,0,0))
        line()
        for i in snake.body:
            show(i,(0,0,180))                       #显示

        pygame.display.update()
        fsp =10-len(snake.body)/30
        flock.tick(fsp)                            #游戏的帧率


class direc:
    def __init__(self, fun):
        self.fung=fun

    def ru(self,list):
        for i in range(1,len(self.fung)):
            self.fung[i-1]=self.fung[i]
        self.fung[-1]=list

    def up(self):
        self.ru([0,-1])


    def down(self):
        self.ru([0,1])


    def left(self):
        self.ru([-1,0])


    def right(self):
        self.ru([1,0])


    def go(self):
        self.ru(self.fung[-1])
#        print('go')

class Snake(direc):                             #采用类的继承
    def __init__(self,body,fun):
        self.body=body
        self.food=[10,10]
        super().__init__(fun)

    def die(self):
        DIEFont = pygame.freetype.Font('C://Windows//Fonts//msyh.ttc', 36)
        gameSurf,gameRect = DIEFont.render("you die",fgcolor=(0,0,0),size=50)
        global screen
        screen.blit(gameSurf,(150,160))
        pygame.display.update()

    def run(self):
        for i in range(1,len(self.body)+1):
            self.body[-i][0]=self.body[-i][0]+self.fung[-i][0]
            self.body[-i][1] = self.body[-i][1] + self.fung[-i][1]


    def eat(self):
        L=[0,0]
        L[0]=self.body[-1][0]+self.fung[-1][0]
        L[1] = self.body[-1][1] + self.fung[-1][1]
        self.body.append(L)
        self.fung.append(self.fung[-1])

    def feed(self):                                          #产生食物
        a=random.randint(3,38)
        b=random.randint(3,28)
        self.food=[a,b]

    def can(self):                                          #判断吃，走，死
        list=[0,0]
        list[0]=self.body[-1][0]+self.fung[-1][0]
        list[1] = self.body[-1][1] + self.fung[-1][1]
#        print(list)
        if list in self.body:
            return 'n'
        elif list[0]<0 or list[0]>=40 or list[1]<0 or list[1]>=30:
            return 'n'
        elif self.food in self.body :
            return 'e'
        else:
            return 'r'


def show(l,color):                                         #显示
    x=l[0]*20
    y=l[1]*20
    Rect=pygame.Rect(x,y,20,20)
    global screen
    pygame.draw.rect(screen,color,Rect)
    InnerRect=pygame.Rect(
            x + 4, y + 4, 20 - 8, 20 - 8)
    pygame.draw.rect(screen,color,InnerRect)

def line():                                              #显示网格
    for x in range(0,800, 20):  # draw vertical lines
        pygame.draw.line(screen, (230, 230, 230), (x, 0), (x, 600))
    for y in range(0,600, 20):  # draw horizontal lines
        pygame.draw.line(screen, (230, 230, 230), (0, y), (800, y))


#def check(clz):                                            #检查
#    float = 0
#    for i in range(2, len(clz.fung), ):
#        k = (clz.body[-i][0] + clz.fung[-i][0] != clz.body[-i + 1][0])
#        j = (clz.body[-i][1] + clz.fung[-i][1] != clz.body[-i + 1][1])
#        if k + j:
#            float = 1
#            print('wrong')
#    if float:
#        for i in range(1, len(clz.body)):
#            print(i)
#            clz.body[i][0] = clz.body[i - 1][0] + clz.fung[i - 1][0]
#            clz.body[i][1] = clz.body[i - 1][1] + clz.fung[i - 1][1]
#    print(clz.body)


main()



